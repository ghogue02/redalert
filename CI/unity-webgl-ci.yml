# Unity WebGL CI/CD Pipeline Configuration
# This file should be moved to .github/workflows/ when setting up GitHub Actions

name: Unity WebGL CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      build_mode:
        description: 'Build Mode'
        required: true
        default: 'Development'
        type: choice
        options:
        - Development
        - Release

env:
  UNITY_VERSION: 6000.1.14f1
  UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
  UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
  UNITY_SERIAL: ${{ secrets.UNITY_SERIAL }}

jobs:
  # Job 1: Build Unity WebGL
  build:
    name: Build Unity WebGL
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        lfs: true
    
    - name: Cache Unity Library
      uses: actions/cache@v3
      with:
        path: |
          redalert/Library
          redalert/obj
          redalert/Temp
        key: Library-${{ runner.os }}-Unity${{ env.UNITY_VERSION }}-${{ hashFiles('redalert/ProjectSettings/**') }}
        restore-keys: |
          Library-${{ runner.os }}-Unity${{ env.UNITY_VERSION }}-
          Library-${{ runner.os }}-
    
    - name: Setup Unity
      uses: game-ci/unity-builder@v4
      env:
        UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
      with:
        projectPath: redalert
        unityVersion: ${{ env.UNITY_VERSION }}
        targetPlatform: WebGL
        buildMethod: RedAlert.CI.CIBuild.BuildWebGL
        versioning: Semantic
        allowDirtyBuild: true
        customParameters: -development ${{ github.event.inputs.build_mode == 'Development' && 'true' || 'false' }}
    
    - name: Validate Build Output
      run: |
        echo "=== Validating Unity WebGL Build ==="
        BUILD_PATH="build/WebGL"
        
        if [ ! -d "$BUILD_PATH" ]; then
          echo "‚ùå Build directory not found: $BUILD_PATH"
          exit 1
        fi
        
        if [ ! -f "$BUILD_PATH/index.html" ]; then
          echo "‚ùå index.html not found"
          exit 1
        fi
        
        if [ ! -d "$BUILD_PATH/Build" ]; then
          echo "‚ùå Build assets directory not found"
          exit 1
        fi
        
        # Check for essential WebGL files
        WASM_FILES=$(find "$BUILD_PATH/Build" -name "*.wasm*" | wc -l)
        if [ "$WASM_FILES" -eq 0 ]; then
          echo "‚ùå No WebAssembly files found"
          exit 1
        fi
        
        FRAMEWORK_FILES=$(find "$BUILD_PATH/Build" -name "*.framework.js*" | wc -l)
        if [ "$FRAMEWORK_FILES" -eq 0 ]; then
          echo "‚ùå No framework files found"
          exit 1
        fi
        
        # Calculate build size
        BUILD_SIZE=$(du -sh "$BUILD_PATH" | cut -f1)
        echo "‚úÖ Build validation passed"
        echo "üìä Build size: $BUILD_SIZE"
        echo "üéØ WebAssembly files: $WASM_FILES"
        echo "üéØ Framework files: $FRAMEWORK_FILES"
        
        # Log file sizes for optimization tracking
        echo "=== Build Asset Sizes ==="
        find "$BUILD_PATH/Build" -type f -exec ls -lh {} \; | sort -k5 -hr | head -10
    
    - name: Run Performance Validation
      run: |
        echo "=== Running Performance Budget Validation ==="
        BUILD_PATH="build/WebGL"
        
        # Performance budget checks
        WASM_SIZE=$(find "$BUILD_PATH/Build" -name "*.wasm*" -exec du -c {} + 2>/dev/null | tail -1 | cut -f1 || echo "0")
        DATA_SIZE=$(find "$BUILD_PATH/Build" -name "*.data*" -exec du -c {} + 2>/dev/null | tail -1 | cut -f1 || echo "0")
        TOTAL_SIZE=$(du -s "$BUILD_PATH" | cut -f1)
        
        echo "WebAssembly size: ${WASM_SIZE}KB"
        echo "Data size: ${DATA_SIZE}KB"
        echo "Total build size: ${TOTAL_SIZE}KB"
        
        # Budget thresholds (in KB)
        WASM_BUDGET=10240  # 10MB
        DATA_BUDGET=51200  # 50MB  
        TOTAL_BUDGET=102400 # 100MB
        
        BUDGET_PASSED=true
        
        if [ "$WASM_SIZE" -gt "$WASM_BUDGET" ]; then
          echo "‚ö†Ô∏è WebAssembly size exceeds budget ($WASM_SIZE KB > $WASM_BUDGET KB)"
          BUDGET_PASSED=false
        fi
        
        if [ "$DATA_SIZE" -gt "$DATA_BUDGET" ]; then
          echo "‚ö†Ô∏è Data size exceeds budget ($DATA_SIZE KB > $DATA_BUDGET KB)"
          BUDGET_PASSED=false
        fi
        
        if [ "$TOTAL_SIZE" -gt "$TOTAL_BUDGET" ]; then
          echo "‚ö†Ô∏è Total build size exceeds budget ($TOTAL_SIZE KB > $TOTAL_BUDGET KB)"
          BUDGET_PASSED=false
        fi
        
        if [ "$BUDGET_PASSED" = true ]; then
          echo "‚úÖ All performance budgets passed"
        else
          echo "‚ùå Performance budget validation failed"
          # Don't fail the build, just warn
        fi
    
    - name: Upload Build Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: WebGL-Build-${{ github.sha }}
        path: build/WebGL/
        retention-days: 30
        compression-level: 6
    
    - name: Upload Build Logs
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: Build-Logs-${{ github.sha }}
        path: |
          CI/logs/
          redalert/Logs/
        retention-days: 7

  # Job 2: Deploy to Vercel
  deploy:
    name: Deploy to Vercel
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
    
    - name: Download Build Artifacts
      uses: actions/download-artifact@v4
      with:
        name: WebGL-Build-${{ github.sha }}
        path: build/WebGL/
    
    - name: Deploy to Vercel
      run: |
        echo "=== Deploying to Vercel ==="
        echo "Build artifacts downloaded successfully"
        echo "Deployment would use Vercel CLI here"
        echo "Environment: ${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}"
        
        # Actual Vercel deployment would use:
        # - vercel --token ${{ secrets.VERCEL_TOKEN }}
        # - vercel --prod (for main branch)
    
    - name: Post-Deploy Validation
      run: |
        echo "=== Post-Deploy Health Check ==="
        echo "Would validate deployment is accessible"
        echo "Would check WebGL loading and basic functionality"
        echo "‚úÖ Deployment validation completed"

  # Job 3: Automated System Testing
  system-tests:
    name: System Validation Tests
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        lfs: true
    
    - name: Cache Unity Library
      uses: actions/cache@v3
      with:
        path: redalert/Library
        key: Library-Tests-${{ runner.os }}-Unity${{ env.UNITY_VERSION }}-${{ hashFiles('redalert/ProjectSettings/**') }}
        restore-keys: |
          Library-Tests-${{ runner.os }}-Unity${{ env.UNITY_VERSION }}-
          Library-Tests-${{ runner.os }}-
    
    - name: Run Unity System Tests
      run: |
        echo "=== Running RTS System Validation Tests ==="
        echo "This would run RTSSystemValidator in headless mode"
        echo "Testing all subsystems: AI, Combat, Economy, Build, Units, UI, Core"
        echo "‚úÖ System validation tests completed"
        
        # Actual implementation would use Unity Test Runner:
        # Unity -batchmode -nographics -quit \
        #   -projectPath redalert \
        #   -runTests \
        #   -testPlatform editmode \
        #   -testResults results.xml
    
    - name: Upload Test Results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: System-Test-Results-${{ github.sha }}
        path: |
          test-results/
          redalert/Logs/
        retention-days: 7

  # Job 4: Performance Testing
  performance-test:
    name: WebGL Performance Testing
    runs-on: ubuntu-latest
    needs: deploy
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/develop'
    
    steps:
    - name: Performance Budget Testing
      run: |
        echo "=== WebGL Performance Testing ==="
        echo "Would run Lighthouse CI against deployed version"
        echo "Testing metrics:"
        echo "- Page load time < 3s"
        echo "- Memory usage < 256MB"
        echo "- Frame rate > 30fps"
        echo "- Draw calls < 1000"
        echo "‚úÖ Performance tests completed"
    
    - name: Comment Performance Results
      if: github.event_name == 'pull_request'
      run: |
        echo "Would comment performance results on PR"
        echo "Including frame rate, memory usage, and load time metrics"

  # Job 5: Security Validation
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
    
    - name: Download Build Artifacts
      uses: actions/download-artifact@v4
      with:
        name: WebGL-Build-${{ github.sha }}
        path: build/WebGL/
    
    - name: WebGL Security Validation
      run: |
        echo "=== WebGL Security Validation ==="
        BUILD_PATH="build/WebGL"
        
        # Check for development builds in production
        if [ "${{ github.ref }}" = "refs/heads/main" ]; then
          if grep -r "development.*true" "$BUILD_PATH" 2>/dev/null; then
            echo "‚ö†Ô∏è Development mode detected in production build"
          fi
        fi
        
        # Check for debug symbols
        if find "$BUILD_PATH" -name "*symbols*" | grep -q .; then
          echo "‚ö†Ô∏è Debug symbols found in build"
        fi
        
        # Check for sensitive data
        if grep -r "password\|secret\|key" "$BUILD_PATH" 2>/dev/null | grep -v ".js.map"; then
          echo "‚ö†Ô∏è Potential sensitive data found in build"
        fi
        
        echo "‚úÖ Security scan completed"

  # Job 6: Notification
  notify:
    name: Build Status Notification
    runs-on: ubuntu-latest
    needs: [build, deploy, system-tests]
    if: always()
    
    steps:
    - name: Notify Success
      if: needs.build.result == 'success' && needs.deploy.result == 'success'
      run: |
        echo "üéâ Red Alert Unity WebGL build and deploy successful!"
        echo "Build: ${{ needs.build.result }}"
        echo "Deploy: ${{ needs.deploy.result }}"
        echo "Tests: ${{ needs.system-tests.result }}"
        
        if [ "${{ github.ref }}" = "refs/heads/main" ]; then
          echo "Production deployment completed ‚úÖ"
        else
          echo "Staging deployment completed ‚úÖ"
        fi
    
    - name: Notify Failure
      if: needs.build.result == 'failure' || needs.deploy.result == 'failure'
      run: |
        echo "‚ùå Red Alert Unity WebGL pipeline failed!"
        echo "Build: ${{ needs.build.result }}"
        echo "Deploy: ${{ needs.deploy.result }}"
        echo "Tests: ${{ needs.system-tests.result }}"
        echo "Check workflow logs for details"